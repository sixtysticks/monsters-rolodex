{"version":3,"sources":["components/card/card.component.tsx","components/card-list/card-list.component.tsx","components/search-box/search-box.component.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","type","placeholder","onChange","handleChange","App","useState","setMonsters","searchField","setSearchField","useEffect","fetch","then","response","json","users","filteredMonsters","filter","toLowerCase","includes","e","target","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0SAOaA,EAAO,SAACC,GACnB,OACE,sBAAKC,UAAU,iBAAf,UACE,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,YAChF,6BAAKL,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,YCJXC,G,MAAW,SAACR,GACvB,OACE,qBAAKC,UAAU,YAAf,SACGD,EAAMS,SAASC,KAAI,SAACP,GAAD,OAClB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCJdO,G,MAAY,SAACX,GACxB,OAAO,uBAAOC,UAAU,SAASW,KAAK,SAASC,YAAab,EAAMa,YAAaC,SAAUd,EAAMe,iBC+BlFC,EAnCO,WACpB,MAAgCC,mBAAoB,CAAC,CAAEb,GAAI,EAAGE,KAAM,GAAIC,MAAO,MAA/E,mBAAOE,EAAP,KAAiBS,EAAjB,KACA,EAAsCD,mBAAS,IAA/C,mBAAOE,EAAP,KAAoBC,EAApB,KAYAC,qBAAU,WAPDC,MAHW,8CAGAC,MAAK,SAACC,GACtB,OAAOA,EAASC,OAAOF,MAAK,SAACG,GAC3BR,EAAYQ,WAOf,IAEH,IAIMC,EAAmBlB,EAASmB,QAAO,SAACzB,GAAD,OACvCA,EAAQG,KAAKuB,cAAcC,SAASX,EAAYU,kBAGlD,OACE,sBAAK5B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWY,YAAY,kBAAkBE,aAXxB,SAACgB,GACpBX,EAAgBW,EAAEC,OAA+BC,UAW/C,cAAC,EAAD,CAAUxB,SAAUkB,QCvBXO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a99a0d7f.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\ninterface Props {\n  monster: Monster;\n}\n\nexport const Card = (props: Props) => {\n  return (\n    <div className='card-container'>\n      <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt='monster' />\n      <h2>{props.monster.name}</h2>\n      <p>{props.monster.email}</p>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Card } from '../card/card.component';\nimport './card-list.styles.css';\n\ninterface Props {\n  monsters: Monster[];\n}\n\nexport const CardList = (props: Props) => {\n  return (\n    <div className='card-list'>\n      {props.monsters.map((monster: Monster) => (\n        <Card key={monster.id} monster={monster} />\n      ))}\n    </div>\n  );\n};\n","import React from 'react';\nimport './search-box.styles.css';\n\ninterface Props {\n  placeholder: string;\n  handleChange: (e: any) => void;\n}\n\nexport const SearchBox = (props: Props) => {\n  return <input className='search' type='search' placeholder={props.placeholder} onChange={props.handleChange} />;\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nconst App: React.FC = () => {\n  const [monsters, setMonsters] = useState<[Monster]>([{ id: 0, name: '', email: '' }]);\n  const [searchField, setSearchField] = useState('');\n\n  const monstersURL = 'https://jsonplaceholder.typicode.com/users';\n\n  const fetchMonstersFromAPI = (url: string) => {\n    return fetch(url).then((response: any) => {\n      return response.json().then((users: [Monster]) => {\n        setMonsters(users);\n      });\n    });\n  };\n\n  useEffect(() => {\n    fetchMonstersFromAPI(monstersURL);\n  }, []);\n\n  const handleChange = (e: React.FormEvent<HTMLTextAreaElement>) => {\n    setSearchField((e.target as HTMLTextAreaElement).value);\n  };\n\n  const filteredMonsters = monsters.filter((monster: Monster) =>\n    monster.name.toLowerCase().includes(searchField.toLowerCase()),\n  );\n\n  return (\n    <div className='App'>\n      <h1>Monsters Rolodex</h1>\n      <SearchBox placeholder='Search monsters' handleChange={handleChange} />\n      <CardList monsters={filteredMonsters} />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}